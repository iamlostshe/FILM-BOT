"""launching the bot."""

import sqlite3

from aiogram import Bot, Dispatcher, F
from aiogram.client.default import DefaultBotProperties
from aiogram.filters import Command, CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.types import KeyboardButton, Message, ReplyKeyboardMarkup

from film_bot.api import API
from film_bot.config import config
from film_bot.db import create_tables, load_user_data
from film_bot.messages import HELP_MSG, START_MSG
from film_bot.models import (
    FilmFromActorForm,
    FilmFromGenreForm,
    FilmFromTitleForm,
    FilmFromYearForm,
)

api = API()
dp = Dispatcher()


@dp.message(CommandStart())
@dp.message(F.text.casefold() == "–≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üìå")
async def command_start_handler(message: Message) -> None:
    """Start command handler."""
    # TODO: –î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å –≤ –±–¥ –¥–ª—è —Å–ø–∏—Å–∫–∞ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
    markup = ReplyKeyboardMarkup(
        keyboard=[
            [
                KeyboardButton(text="üå∏ –ê–Ω–∏–º–µ"),
                KeyboardButton(text="üì∫ –î–æ—Ä–∞–º—ã"),
                KeyboardButton(text="‚ù§Ô∏è –ò–∑–±—Ä–∞–Ω–Ω–æ–µ"),
            ],
            [
                KeyboardButton(text="‚ùì –ß—Ç–æ —è —É–º–µ—é?"),
            ],
        ],
        resize_keyboard=True,
    )

    await message.answer(START_MSG, reply_markup=markup)


@dp.message(Command("help"))
@dp.message(F.text.casefold() == "‚ùì —á—Ç–æ —è —É–º–µ—é?")
async def command_help_handler(message: Message) -> None:
    """Start command handler."""
    await message.answer(HELP_MSG)


@dp.message(F.text.casefold() == "üå∏ –∞–Ω–∏–º–µ")
async def anime_button_handler(message: Message) -> None:
    """Anime button handler."""
    markup = ReplyKeyboardMarkup(
        keyboard=[
            [
                KeyboardButton(text="–ü–æ–∏—Å–∫ –∞–Ω–∏–º–µ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é üîé"),
                KeyboardButton(text="–ü–æ–∏—Å–∫ –∞–Ω–∏–º–µ –ø–æ –∂–∞–Ω—Ä—É üé≠"),
                KeyboardButton(text="–ü–æ–∏—Å–∫ –∞–Ω–∏–º–µ –ø–æ –≥–æ–¥—É üéØ"),
            ],
            [
                KeyboardButton(text="–°–ª—É—á–∞–π–Ω–æ–µ –∞–Ω–∏–º–µ üí°"),
                KeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üìå"),
            ],
        ],
        resize_keyboard=True,
    )
    await message.answer("–í—ã –≤ —Ä–∞–∑–¥–µ–ª–µ üå∏ –ê–Ω–∏–º–µ", reply_markup=markup)


@dp.message(F.text.casefold() == "üì∫ –¥–æ—Ä–∞–º—ã")
async def dorama_button_handler(message: Message) -> None:
    """Dorama button handler."""
    markup = ReplyKeyboardMarkup(
        keyboard=[
            [
                KeyboardButton(text="–ü–æ–∏—Å–∫ –¥–æ—Ä–∞–º—ã –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é üîé"),
                KeyboardButton(text="–ü–æ–∏—Å–∫ –¥–æ—Ä–∞–º—ã –ø–æ –∂–∞–Ω—Ä—É üé≠"),
                KeyboardButton(text="–ü–æ–∏—Å–∫ –¥–æ—Ä–∞–º—ã –ø–æ –≥–æ–¥—É üéØ"),
            ],
            [
                KeyboardButton(text="–°–ª—É—á–∞–π–Ω–∞—è –¥–æ—Ä–∞–º–∞ üí°"),
                KeyboardButton(text="–ü–æ–∏—Å–∫ –¥–æ—Ä–∞–º—ã –ø–æ –∞–∫—Ç–µ—Ä—É üíé"),
                KeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üìå"),
            ],
        ],
        resize_keyboard=True,
    )
    await message.answer("–í—ã –≤ —Ä–∞–∑–¥–µ–ª–µ üì∫ –î–æ—Ä–∞–º—ã", reply_markup=markup)


@dp.message(F.text.casefold() == "‚ù§Ô∏è –∏–∑–±—Ä–∞–Ω–Ω–æ–µ")
async def favorites_button_handler(message: Message) -> None:
    """Favorites button handler."""
    markup = ReplyKeyboardMarkup(
        keyboard=[
            [
                KeyboardButton(text="–ú–æ–π —Å–ø–∏—Å–æ–∫ üìú"),
                KeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –≤ –ò–∑–±—Ä–∞–Ω–Ω–æ–µ üìù"),
            ],
            [
                KeyboardButton(text="–£–¥–∞–ª–∏—Ç—å –∏–∑ –ò–∑–±—Ä–∞–Ω–Ω–æ–≥–æ üö´"),
                KeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üìå"),
            ],
        ],
        resize_keyboard=True,
    )

    await message.answer("–í—ã –≤ —Ä–∞–∑–¥–µ–ª–µ ‚ù§Ô∏è –ò–∑–±—Ä–∞–Ω–Ω–æ–µ", reply_markup=markup)


@dp.message(F.text.casefold() == "–ø–æ–∏—Å–∫ –∞–Ω–∏–º–µ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é üîé")
@dp.message(F.text.casefold() == "–ø–æ–∏—Å–∫ –¥–æ—Ä–∞–º—ã –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é üîé")
async def film_from_title_handler(message: Message, state: FSMContext) -> None:
    """–ü–æ–∏—Å–∫ –∞–Ω–∏–º–µ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é."""
    # Set state
    await state.set_state(FilmFromTitleForm.title)

    # Add film type parameter
    film_type = message.text.split()[1]
    state.update_data(film_type=film_type)

    # Responding to the user
    await message.answer(
        f"–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ {film_type}, –∫–æ—Ç–æ—Ä–æ–µ (-—É—é) —Ö–æ—á–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å",
    )


@dp.message(F.text.casefold() == "–ø–æ–∏—Å–∫ –∞–Ω–∏–º–µ –ø–æ –∂–∞–Ω—Ä—É üé≠")
@dp.message(F.text.casefold() == "–ø–æ–∏—Å–∫ –¥–æ—Ä–∞–º—ã –ø–æ –∂–∞–Ω—Ä—É üé≠")
async def film_from_genre_handler(message: Message, state: FSMContext) -> None:
    # Set state
    await state.set_state(FilmFromGenreForm.genre)

    # Add film type parameter
    film_type = message.text.split()[1]
    state.update_data(film_type=film_type)

    # Responding to the user
    await message.answer(
        "–í–≤–µ–¥–∏ –Ω—É–∂–Ω—ã–µ –∂–∞–Ω—Ä—ã (–µ—Å–ª–∏ –∏—Ö –Ω–µ—Å–∫–æ–ª—å–∫–æ, —Ç–æ —É–∫–∞–∂–∏ –∏—Ö —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é).",
    )


@dp.message(F.text.casefold() == "–ø–æ–∏—Å–∫ –∞–Ω–∏–º–µ –ø–æ –∞–∫—Ç–µ—Ä—É üíé")
@dp.message(F.text.casefold() == "–ø–æ–∏—Å–∫ –¥–æ—Ä–∞–º—ã –ø–æ –∞–∫—Ç–µ—Ä—É üíé")
async def film_from_actor_handler(message: Message, state: FSMContext) -> None:
    # Set state
    await state.set_state(FilmFromActorForm.genre)

    # Add film type parameter
    film_type = message.text.split()[1]
    state.update_data(film_type=film_type)

    # Responding to the user
    await message.answer(
        "–í–≤–µ–¥–∏ –Ω—É–∂–Ω—ã—Ö –∞–∫—Ç–µ—Ä–æ–≤ (–µ—Å–ª–∏ –∏—Ö –Ω–µ—Å–∫–æ–ª—å–∫–æ, "
        "—Ç–æ —É–∫–∞–∂–∏ –∏—Ö —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é, –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤)",
    )


@dp.message(F.text.casefold() == "–ø–æ–∏—Å–∫ –∞–Ω–∏–º–µ –ø–æ –≥–æ–¥—É üéØ")
@dp.message(F.text.casefold() == "–ø–æ–∏—Å–∫ –¥–æ—Ä–∞–º—ã –ø–æ –≥–æ–¥—É üéØ")
async def film_from_year_handler(message: Message, state: FSMContext) -> None:
    # Set state
    await state.set_state(FilmFromYearForm.genre)

    # Add film type parameter
    film_type = message.text.split()[1]
    state.update_data(film_type=film_type)

    # Responding to the user
    await message.answer(
        "–í–≤–µ–¥–∏ –Ω—É–∂–Ω—ã–π –≥–æ–¥ –∏–ª–∏ –¥–∏–∞–ø–∞–∑–æ–Ω –≥–æ–¥–æ–≤ (–µ—Å–ª–∏ –≤–≤–æ–¥–∏—à—å "
        "–¥–∏–∞–ø–∞–∑–æ–Ω, —Ç–æ –≤–≤–æ–¥–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –≥–æ–¥-–≥–æ–¥)",
    )


@dp.message(F.text.casefold() == "—Å–ª—É—á–∞–π–Ω–æ–µ –∞–Ω–∏–º–µ üí°")
@dp.message(F.text.casefold() == "—Å–ª—É—á–∞–π–Ω–∞—è –¥–æ—Ä–∞–º–∞ üí°")
async def random_film_handler(message: Message) -> None:
    # Get the type of movie required by the user
    film_type = message.text.split()[1]

    # Responding to the user
    await message.answer(
        f"–°–ª—É—á–∞–π–Ω–æ–µ (-–∞—è) {film_type}, –Ω–∞–¥–µ—é—Å—å, —á—Ç–æ –æ–Ω–æ (-–∞) —Ç–µ–±–µ –ø–æ–Ω—Ä–∞–≤–∏—Ç—Å—è:",
    )
    await message.answer(
        await api.random(film_type),
    )


@dp.message(FilmFromTitleForm.title)
async def anime_from_title_state_handler(message: Message, state: FSMContext) -> None:
    """–ü–æ–∏—Å–∫ –∞–Ω–∏–º–µ/–¥–æ—Ä–∞–º –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é."""
    print(await state.get_data())
    await message.answer(await api.from_title(message.text, (await state.get_data())["film_type"]))


@dp.message(FilmFromGenreForm.genre)
async def anime_from_genre_state_handler(message: Message, state: FSMContext) -> None:
    """–ü–æ–∏—Å–∫ –∞–Ω–∏–º–µ/–¥–æ—Ä–∞–º –ø–æ –∂–∞–Ω—Ä—É."""
    await message.answer(await api.from_genre(message.text, (await state.get_data())["film_type"]))


@dp.message(FilmFromActorForm.actor)
async def anime_from_actor_state_handler(message: Message, state: FSMContext) -> None:
    """–ü–æ–∏—Å–∫ –∞–Ω–∏–º–µ/–¥–æ—Ä–∞–º –ø–æ –∂–∞–Ω—Ä—É."""
    await message.answer(await api.from_genre(message.text, (await state.get_data())["film_type"]))


@dp.message(FilmFromYearForm.year)
async def anime_from_year_state_handler(message: Message, state: FSMContext) -> None:
    """–ü–æ–∏—Å–∫ –∞–Ω–∏–º–µ/–¥–æ—Ä–∞–º –ø–æ –∂–∞–Ω—Ä—É."""
    await message.answer(await api.from_genre(message.text, (await state.get_data())["film_type"]))


# TODO: Dealing with the database and favorites list
"""
    elif message.text == "–î–æ–±–∞–≤–∏—Ç—å –≤ –ò–∑–±—Ä–∞–Ω–Ω–æ–µ üìù":
        message = self.bot.send_message(
            message.chat.id,
            "–í–≤–µ–¥–∏, —á—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å: –∞–Ω–∏–º–µ –∏–ª–∏ –¥–æ—Ä–∞–º—É",
        )

    elif message.text == "–ú–æ–π —Å–ø–∏—Å–æ–∫ üìú":
        message = self.bot.send_message(
            message.chat.id,
            "–í–≤–µ–¥–∏, —á—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å —É–≤–∏–¥–µ—Ç—å: –∞–Ω–∏–º–µ –∏–ª–∏ –¥–æ—Ä–∞–º—ã",
        )

    elif message.text == "–£–¥–∞–ª–∏—Ç—å –∏–∑ –ò–∑–±—Ä–∞–Ω–Ω–æ–≥–æ üö´":
        message = self.bot.send_message(
            message.chat.id,
            "–í–≤–µ–¥–∏, —á—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å —É–¥–∞–ª–∏—Ç—å: –∞–Ω–∏–º–µ –∏–ª–∏ –¥–æ—Ä–∞–º—É",
        )
"""


@dp.message()
async def any_messages_handler(message: Message) -> None:
    """Any messages handler."""
    await message.answer(
        (
            "‚öôÔ∏è –ù–∞ —Ç–∞–∫—É—é –∫–æ–º–∞–Ω–¥—É —è –Ω–µ –∑–∞–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω... "
            "–ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ /help"
        ),
    )


async def main() -> None:
    """Bot startup."""
    # TODO: –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ñ–∞–π–ª –¥–ª—è —Å–±–æ—Ä–∞ –ª–æ–≥–æ–≤
    # TODO: –ü–æ–¥–∫–ª—é—á–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–ø–∏—Å–∫–∞ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
    await api.init()
    db_connection = sqlite3.connect("index.db", check_same_thread=False)

    # create_tables(db_connection)
    # user_data = load_user_data(db_connection)  # noqa: ERA001

    bot = Bot(token=config.telegam_bot_token, default=DefaultBotProperties())
    await dp.start_polling(bot)
